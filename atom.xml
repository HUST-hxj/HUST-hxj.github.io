<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hu Xinjing&#39;s Site</title>
  
  
  <link href="https://husthxj.top/atom.xml" rel="self"/>
  
  <link href="https://husthxj.top/"/>
  <updated>2021-06-07T11:00:04.647Z</updated>
  <id>https://husthxj.top/</id>
  
  <author>
    <name>HUST_hxj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello,World!</title>
    <link href="https://husthxj.top/2021/05/14/hello-world/"/>
    <id>https://husthxj.top/2021/05/14/hello-world/</id>
    <published>2021-05-14T07:57:24.000Z</published>
    <updated>2021-06-07T11:00:04.647Z</updated>
    
    <content type="html"><![CDATA[<p>个人网站开通，纪念一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;个人网站开通，纪念一下。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="闲侃" scheme="https://husthxj.top/categories/%E9%97%B2%E4%BE%83/"/>
    
    
    <category term="送你一朵小红花" scheme="https://husthxj.top/tags/%E9%80%81%E4%BD%A0%E4%B8%80%E6%9C%B5%E5%B0%8F%E7%BA%A2%E8%8A%B1/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P3931 一道难题 Tree 题解</title>
    <link href="https://husthxj.top/2019/10/10/luogu-p3931/"/>
    <id>https://husthxj.top/2019/10/10/luogu-p3931/</id>
    <published>2019-10-10T13:24:40.000Z</published>
    <updated>2021-06-08T05:22:46.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h2><p><a href="https://www.luogu.com.cn/problem/P3931">https://www.luogu.com.cn/problem/P3931</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>根据题意，本题与最小割问题极为相似，根据最大流最小割定理，本题可转化为求网络最大流。</p><span id="more"></span><p>还未学习该知识的，请先学习，然后建议先写模板题练习一下。</p><p>首先，提醒一个雷区！题目给的是一个无向图，故我们需要先从树根开始对这个无向图进行dfs预处理，把无向边转换成有向边。（WA 20分的绝大多数都忽略了这一点，包括我）</p><p>然后，一个网络流图不仅要有源点（即树的根节点），还要有汇点。我们假设n+1即为汇点，让所有的叶子节点都伸出一条指向n+1的有向边（这个可以在dfs预处理时顺便处理一下，而且要记得建反向边）。</p><p>题目要求任何叶子节点都和根节点不连通，而这个条件恰恰和汇点和源点不连通是等价的（因为所有叶子节点都和汇点连通，故但凡有任何一个叶子节点和根节点连通，汇点和源点都是连通的）。</p><p>至此，我们已经完成了构造，接下来问题就只剩下求网络流图的最大流了。这里有多种算法可以选择，我使用的是dinic算法，具体实现不再赘述。在存图时我采取的是vector存图，下面的代码供参考。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I 0x3f3f3f3f<span class="comment">//无穷大</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">road</span>&#123;</span><span class="keyword">int</span> to,w;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> to,w;&#125;e[N&lt;&lt;<span class="number">2</span>];<span class="comment">//存储边的信息，考虑到双向建边（包括叶子节点与汇点）的问题，保险起见开四倍数组</span></span><br><span class="line">vector&lt;road&gt; g[N];<span class="comment">//存初始的无向图</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v[N];<span class="comment">//存转化之后的有向图</span></span><br><span class="line"><span class="keyword">int</span> n,s,t,t1,t2,t3,cnt,ans,d[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(g[x].<span class="built_in">size</span>()==<span class="number">1</span>&amp;&amp;g[x][<span class="number">0</span>].to==fa)<span class="comment">//判叶子节点，和汇点建边</span></span><br><span class="line">    &#123;</span><br><span class="line">      v[x].<span class="built_in">push_back</span>(cnt);</span><br><span class="line">      e[cnt].to=t;</span><br><span class="line">      e[cnt++].w=I;</span><br><span class="line">      v[t].<span class="built_in">push_back</span>(cnt);<span class="comment">//建反向边</span></span><br><span class="line">      e[cnt].to=x;</span><br><span class="line">      e[cnt++].w=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> to=g[x][i].to,w=g[x][i].w;</span><br><span class="line">      <span class="keyword">if</span>(to==fa)<span class="keyword">continue</span>;</span><br><span class="line">      v[x].<span class="built_in">push_back</span>(cnt);</span><br><span class="line">      e[cnt].to=to;</span><br><span class="line">      e[cnt++].w=w;</span><br><span class="line">      v[to].<span class="built_in">push_back</span>(cnt);<span class="comment">//建反向边</span></span><br><span class="line">      e[cnt].to=x;</span><br><span class="line">      e[cnt++].w=<span class="number">0</span>;</span><br><span class="line">      <span class="built_in">pre</span>(to,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">  <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(d));</span><br><span class="line">  d[s]=<span class="number">1</span>;</span><br><span class="line">  q.<span class="built_in">push</span>(s);</span><br><span class="line">  <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> now=q.<span class="built_in">front</span>();</span><br><span class="line">      q.<span class="built_in">pop</span>();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[now].<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> temp=v[now][i];</span><br><span class="line">      <span class="keyword">int</span> to=e[temp].to,w=e[temp].w;</span><br><span class="line">      <span class="keyword">if</span>(!d[to]&amp;&amp;w)</span><br><span class="line">        &#123;</span><br><span class="line">          d[to]=d[now]+<span class="number">1</span>;</span><br><span class="line">          q.<span class="built_in">push</span>(to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> d[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> minn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(now==t)<span class="keyword">return</span> minn;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[now].<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> temp=v[now][i];</span><br><span class="line">      <span class="keyword">int</span> to=e[temp].to,w=e[temp].w;</span><br><span class="line">      <span class="keyword">if</span>(d[to]==d[now]+<span class="number">1</span>&amp;&amp;w)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> res=<span class="built_in">dfs</span>(to,<span class="built_in">min</span>(minn,w));</span><br><span class="line">      <span class="keyword">if</span>(res)</span><br><span class="line">        &#123;</span><br><span class="line">          e[temp].w-=res;</span><br><span class="line">          e[temp^<span class="number">1</span>].w+=res;</span><br><span class="line">          <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;s);</span><br><span class="line">  t=n+<span class="number">1</span>;<span class="comment">//设置汇点</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;t1,&amp;t2,&amp;t3);</span><br><span class="line">      g[t1].<span class="built_in">push_back</span>(&#123;t2,t3&#125;);<span class="comment">//存无向图</span></span><br><span class="line">      g[t2].<span class="built_in">push_back</span>(&#123;t1,t3&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">pre</span>(s,s);<span class="comment">//预处理，无向图转有向图</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">bfs</span>())<span class="comment">//dinic算法求最大流</span></span><br><span class="line">    ans+=<span class="built_in">dfs</span>(s,I);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;原题链接&quot;&gt;&lt;a href=&quot;#原题链接&quot; class=&quot;headerlink&quot; title=&quot;原题链接&quot;&gt;&lt;/a&gt;原题链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P3931&quot;&gt;https://www.luogu.com.cn/problem/P3931&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;根据题意，本题与最小割问题极为相似，根据最大流最小割定理，本题可转化为求网络最大流。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://husthxj.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="洛谷" scheme="https://husthxj.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="深度优先搜索" scheme="https://husthxj.top/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    <category term="广度优先搜索" scheme="https://husthxj.top/tags/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    <category term="最大流" scheme="https://husthxj.top/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P3014 牛线Cow Line 题解</title>
    <link href="https://husthxj.top/2019/10/09/luogu-p3014/"/>
    <id>https://husthxj.top/2019/10/09/luogu-p3014/</id>
    <published>2019-10-09T00:54:36.000Z</published>
    <updated>2021-06-08T05:22:42.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h2><p><a href="https://www.luogu.com.cn/problem/P3014">https://www.luogu.com.cn/problem/P3014</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>康托展开（使用树状数组优化）与逆康托展开。</p><span id="more"></span><p>在康托展开时，需要计算每一位数字在它和它以后的所有数字中是第几大的数，在这里我使用了树状数组对算法的时间复杂度进行了优化。</p><p>我们设add(x,y)是将x加上y，ask(x)是查询x的前缀和。在预处理时，我们对从1到n的每一个i都分别add(i,1),假设我们当前算到了第i位数a[i]，首先我们add(a[i],-1),这个操作就相当于把a[i]划掉，而在第i位之前出现过的数都已经被我们提前划掉了。那么ask(a[i])即为在第i位之后出现的比a[i]小的数的总个数（即：还未被划掉的比a[i]小的数的总个数）。这样，我们就巧妙地利用了树状数组的性质对康托展开进行了优化。在数据较大时，这种优化作用是极为显著的。</p><p>最后提醒一下：一定要开long long！</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,k,t2,ans,fact[<span class="number">21</span>],tree[<span class="number">21</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">21</span>];</span><br><span class="line"><span class="keyword">char</span> t1;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x)tree[x]+=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ll res=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(;x;x-=x&amp;-x)res+=tree[x];</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">  fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;n;i++)fact[i]=fact[i<span class="number">-1</span>]*i;<span class="comment">//递推求阶乘</span></span><br><span class="line">  <span class="keyword">while</span>(k--)</span><br><span class="line">    &#123;</span><br><span class="line">      cin&gt;&gt;t1;</span><br><span class="line">      <span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(tree));</span><br><span class="line">      <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">      <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">add</span>(i,<span class="number">1</span>);<span class="comment">//预处理树状数组</span></span><br><span class="line">      <span class="built_in"><span class="keyword">switch</span></span>(t1)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span>:<span class="comment">//康托展开（树状数组优化）</span></span><br><span class="line">      ans=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t2);</span><br><span class="line">          <span class="built_in">add</span>(t2,<span class="number">-1</span>);<span class="comment">//划掉这个数</span></span><br><span class="line">          ans+=<span class="built_in">ask</span>(t2)*fact[n-i];<span class="comment">//运用树状数组求这位数字在它和它以后的所有数字中是第几大的数</span></span><br><span class="line">        &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans+<span class="number">1</span>);<span class="comment">//记得求出来的结果要加1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;P&#x27;</span>:<span class="comment">//逆康托展开</span></span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t2);</span><br><span class="line">      t2--;</span><br><span class="line">      <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">          ll temp=t2/fact[n-i];</span><br><span class="line">          <span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span>(vis[j])<span class="keyword">continue</span>;</span><br><span class="line">          <span class="keyword">if</span>(!temp)</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,j);</span><br><span class="line">              vis[j]=<span class="number">1</span>;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          temp--;</span><br><span class="line">        &#125;</span><br><span class="line">          t2%=fact[n-i];</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;原题链接&quot;&gt;&lt;a href=&quot;#原题链接&quot; class=&quot;headerlink&quot; title=&quot;原题链接&quot;&gt;&lt;/a&gt;原题链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P3014&quot;&gt;https://www.luogu.com.cn/problem/P3014&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;康托展开（使用树状数组优化）与逆康托展开。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://husthxj.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="洛谷" scheme="https://husthxj.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="康托展开" scheme="https://husthxj.top/tags/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/"/>
    
    <category term="树状数组" scheme="https://husthxj.top/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P1280 尼克的任务 题解</title>
    <link href="https://husthxj.top/2019/10/05/luogu-p1280/"/>
    <id>https://husthxj.top/2019/10/05/luogu-p1280/</id>
    <published>2019-10-05T10:37:36.000Z</published>
    <updated>2021-06-08T05:22:27.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h2><p><a href="https://www.luogu.com.cn/problem/P1280">https://www.luogu.com.cn/problem/P1280</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>动态规划，具体步骤如下。</p><span id="more"></span><ul><li><p>预处理阶段<br>设置两个bool数组begin、end，begin数组记录每个时间点有无任务开始，end数组记录每个时间点有无任务结束。每次输入一个任务的起止时间后，更新两个bool数组并建立一条从终止时间到起止时间的有向边，用vector实现的二维数组存储。</p></li><li><p>DP阶段<br>从后往前进行一遍扫描。设置数组f，f[i]记录从时间点i到工作日结束之间最长的空暇时间（即：时间点i的“逆推最大空暇时间”）。</p></li></ul><p>扫描到有任务结束的时间点时，以为此时任务刚结束，从下一分钟才会进入空暇状态，故我们用当前时间下一分钟的“逆推最大空暇时间”分别对【当前时间结束的所有任务】的起始时间的“逆推最大空暇时间”进行比较，若更大则替换之。这一步把所有有任务开始的时间点的“逆推最大空暇时间”已经更新为最优解。</p><p>同时，若没有任务在当前时间开始，则下一分钟的“逆推最大空暇时间”加一之后即为当前时间的“逆推最大空暇时间”。</p><p>一遍扫描过后，f[1]即为从工作日开始到工作日结束的“逆推最大空暇时间”，直接输出即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,k,t,p,now,f[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">bool</span> begin[<span class="number">10001</span>],end[<span class="number">10001</span>];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x&gt;y?x:y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)<span class="comment">//预处理阶段</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;p,&amp;t);</span><br><span class="line">      begin[p]=<span class="number">1</span>;<span class="comment">//做标记</span></span><br><span class="line">      end[p+t<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">      v[p+t<span class="number">-1</span>].<span class="built_in">push_back</span>(p);<span class="comment">//建边</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)<span class="comment">//DP阶段</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(end[i])</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;v[i].<span class="built_in">size</span>();k++)</span><br><span class="line">      f[v[i][k]]=<span class="built_in">max</span>(f[v[i][k]],f[i+<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">if</span>(!begin[i])f[i]=f[i+<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,f[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;原题链接&quot;&gt;&lt;a href=&quot;#原题链接&quot; class=&quot;headerlink&quot; title=&quot;原题链接&quot;&gt;&lt;/a&gt;原题链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P1280&quot;&gt;https://www.luogu.com.cn/problem/P1280&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;动态规划，具体步骤如下。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://husthxj.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="洛谷" scheme="https://husthxj.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="动态规划" scheme="https://husthxj.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P1064 金明的预算方案 题解</title>
    <link href="https://husthxj.top/2019/10/05/luogu-p1064/"/>
    <id>https://husthxj.top/2019/10/05/luogu-p1064/</id>
    <published>2019-10-05T02:00:30.000Z</published>
    <updated>2021-06-08T05:22:20.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h2><p><a href="https://www.luogu.com.cn/problem/P1064">https://www.luogu.com.cn/problem/P1064</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>根据题意我们可以得知，只选主件、只选主件和第一个附件、只选主件和第二个附件、主件和两个附件都选这四种情况是互斥的，只能且必须任选其一，符合分组背包类似于“每组物品中只能选一个”的性质。由此可知，本题可以设法使用分组背包来做。我们根据题目特性，巧用预处理把问题转化为分组背包问题。</p><span id="more"></span><p>首先进行预处理，我们用一个结构体来存储物品的信息，把所有物品依照主附件关系分为若干组用vector容器v构建二维数组来存储。</p><p>在读入数据时，如果第i件物品是主件，那我们就把第i件物品的价格（DP时用到）和价格与重要度的乘积（更新答案时用到，以下都称“实际权重”）push_back到v[i]中；如果第i件物品是第j件物品的附件，那就把物品j按照如下规定的思路push_back到v[j]，v[i]留空即可。</p><p>根据四种互斥情况，我们规定每组物品：</p><ul><li>第一个物品的价格和实际权重等于主件；</li><li>第二个物品的价格和实际权重等于主件+第一个附件；</li><li>第三个物品的价格和实际权重等于主件+第二个附件；</li><li>第四个物品的价格和实际权重等于主件+第一个附件+第二个附件；</li></ul><p>又因为主件=第一个物品，主件+第一个附件=第二个物品，故上述规定可以表示为：</p><ul><li>第一个物品的价格和实际权重等于主件；</li><li>第二个物品的价格和实际权重等于第一个物品+第一个附件；</li><li>第三个物品的价格和实际权重等于第一个物品+第二个附件；</li><li>第四个物品的价格和实际权重等于第二个物品+第二个附件；</li></ul><p>上述规定可以用一个for循环进行递推计算，每次加入新附件时在遍历已有该附件对应主件和该主件其它附件的同时进行累加，将累加后的结果push_back到末端即可。（具体请参照代码）</p><p>至此，预处理结束，设m件物品中有a件主件和m-a件附件，则这些物品已经被分为a组，每组物品以主件开头，最多4件物品（根据题目数据，附件是一定出现在主件之后的）。</p><p>问题已经彻底转化成了一个分组背包问题，直接套用分组背包DP的模板求解即可。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">good</span>&#123;</span><span class="keyword">int</span> w,t;&#125;;</span><br><span class="line">vector&lt;good&gt; v[<span class="number">61</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,a,b,c,f[<span class="number">32001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x&gt;y?x:y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">      <span class="keyword">int</span> temp=v[c].<span class="built_in">size</span>();<span class="comment">//提前记录当前主件和该主件已出现的附件的总数，避免后面出现死循环</span></span><br><span class="line">      <span class="keyword">if</span>(!c)v[i].<span class="built_in">push_back</span>(&#123;a,a*b&#125;);<span class="comment">//处理主件</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;temp;k++)</span><br><span class="line">         v[c].<span class="built_in">push_back</span>(&#123;a+v[c][k].w,a*b+v[c][k].t&#125;);<span class="comment">//依据题解中规则处理附件</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//一维分组背包模板</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=n;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;v[i].<span class="built_in">size</span>();k++)</span><br><span class="line">    &#123;</span><br><span class="line">      good now=v[i][k];</span><br><span class="line">      <span class="keyword">if</span>(j&gt;=now.w)f[j]=<span class="built_in">max</span>(f[j],f[j-now.w]+now.t);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,f[n]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;原题链接&quot;&gt;&lt;a href=&quot;#原题链接&quot; class=&quot;headerlink&quot; title=&quot;原题链接&quot;&gt;&lt;/a&gt;原题链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P1064&quot;&gt;https://www.luogu.com.cn/problem/P1064&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;根据题意我们可以得知，只选主件、只选主件和第一个附件、只选主件和第二个附件、主件和两个附件都选这四种情况是互斥的，只能且必须任选其一，符合分组背包类似于“每组物品中只能选一个”的性质。由此可知，本题可以设法使用分组背包来做。我们根据题目特性，巧用预处理把问题转化为分组背包问题。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://husthxj.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="洛谷" scheme="https://husthxj.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="动态规划" scheme="https://husthxj.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P2296 寻找道路 题解</title>
    <link href="https://husthxj.top/2019/09/26/luogu-p2296/"/>
    <id>https://husthxj.top/2019/09/26/luogu-p2296/</id>
    <published>2019-09-26T02:58:59.000Z</published>
    <updated>2021-06-08T05:22:35.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h2><p><a href="https://www.luogu.com.cn/problem/P2296">https://www.luogu.com.cn/problem/P2296</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>读入图时建立正向边和反向边，两次DFS标记所有合法的点，再进行一遍BFS求最短路径。</p><span id="more"></span><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,m,t1,t2,s,t,d[N];</span><br><span class="line"><span class="keyword">bool</span> vis[N],go1[N],go2[N],go[N],inq[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; gt[N],g[N];</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vis[x]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;gt[x].<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> to=gt[x][i];</span><br><span class="line">      <span class="keyword">if</span>(go1[x])go1[to]=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(vis[to])<span class="keyword">continue</span>;</span><br><span class="line">      <span class="built_in">dfs1</span>(to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vis[x]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g[x].<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> to=g[x][i];</span><br><span class="line">      <span class="keyword">if</span>(go2[x])go2[to]=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(vis[to])<span class="keyword">continue</span>;</span><br><span class="line">      <span class="built_in">dfs2</span>(to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;t1,&amp;t2);</span><br><span class="line">      <span class="keyword">if</span>(t1==t2)<span class="keyword">continue</span>;</span><br><span class="line">      gt[t2].<span class="built_in">push_back</span>(t1);<span class="comment">//反向建图</span></span><br><span class="line">      g[t1].<span class="built_in">push_back</span>(t2);<span class="comment">//正向建图</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;s,&amp;t);</span><br><span class="line">  go1[t]=go2[t]=<span class="number">1</span>;</span><br><span class="line">  d[t]=<span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">dfs1</span>(t);<span class="comment">//dfs反向图，标记和终点反向联通的点</span></span><br><span class="line">  <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">  <span class="built_in">dfs2</span>(t);<span class="comment">//dfs正向图，标记和终点正向联通的点</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//标记所有合法点</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(!go1[i]&amp;&amp;!go2[i])<span class="keyword">continue</span>;</span><br><span class="line">      go[i]=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;g[i].<span class="built_in">size</span>();j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> to=g[i][j];</span><br><span class="line">      <span class="keyword">if</span>(!go1[to]&amp;&amp;!go2[to])</span><br><span class="line">        &#123;</span><br><span class="line">          go[i]=<span class="number">0</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  q.<span class="built_in">push</span>(s);</span><br><span class="line">  inq[s]=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())<span class="comment">//bfs正向图，得最短路径</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> now=q.<span class="built_in">front</span>();</span><br><span class="line">      q.<span class="built_in">pop</span>();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g[now].<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> to=g[now][i];</span><br><span class="line">      <span class="keyword">if</span>(inq[to]||!go[to])<span class="keyword">continue</span>;</span><br><span class="line">      q.<span class="built_in">push</span>(to);</span><br><span class="line">      inq[to]=<span class="number">1</span>;</span><br><span class="line">      d[to]=d[now]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,d[t]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;原题链接&quot;&gt;&lt;a href=&quot;#原题链接&quot; class=&quot;headerlink&quot; title=&quot;原题链接&quot;&gt;&lt;/a&gt;原题链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2296&quot;&gt;https://www.luogu.com.cn/problem/P2296&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;读入图时建立正向边和反向边，两次DFS标记所有合法的点，再进行一遍BFS求最短路径。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://husthxj.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="洛谷" scheme="https://husthxj.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="深度优先搜索" scheme="https://husthxj.top/tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
    <category term="广度优先搜索" scheme="https://husthxj.top/tags/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P1010 幂次方 题解</title>
    <link href="https://husthxj.top/2019/05/08/luogu-p1010/"/>
    <id>https://husthxj.top/2019/05/08/luogu-p1010/</id>
    <published>2019-05-08T09:37:48.000Z</published>
    <updated>2021-08-04T13:20:51.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h2><p><a href="https://www.luogu.com.cn/problem/P1010">https://www.luogu.com.cn/problem/P1010</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>本蒟蒻来发一波题解，没多少技巧，就是打表。</p><span id="more"></span><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> for(i,a,b) for(int i=a;i&lt;=b;i++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,mega[<span class="number">111</span>];<span class="comment">//mega数组存储预处理的2的1到14次方（2^15&gt;20000，所以之后的枚举只需到14即可）</span></span><br><span class="line">string open[<span class="number">15</span>];</span><br><span class="line"><span class="keyword">bool</span> odd;<span class="comment">//数的奇偶</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">even</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">    odd=<span class="number">1</span>;</span><br><span class="line">    n-=<span class="number">1</span>;<span class="comment">//如果是奇数就直接先-1变成偶数，最后再把1补上</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">even</span>();<span class="comment">//判断奇偶</span></span><br><span class="line">    <span class="keyword">for</span>(i,<span class="number">1</span>,<span class="number">14</span>)mega[i]=<span class="built_in">pow</span>(<span class="number">2</span>,i);<span class="comment">//预处理并存储2的1~14次方</span></span><br><span class="line"><span class="comment">//前方高能，预处理并存储1~14拆分后的字符串，后面用</span></span><br><span class="line">    open[<span class="number">1</span>]=<span class="string">&quot;2(0)&quot;</span>;open[<span class="number">2</span>]=<span class="string">&quot;2&quot;</span>;open[<span class="number">3</span>]=<span class="string">&quot;2+2(0)&quot;</span>;open[<span class="number">4</span>]=<span class="string">&quot;2(2)&quot;</span>;</span><br><span class="line">    open[<span class="number">5</span>]=<span class="string">&quot;2(2)+2(0)&quot;</span>;open[<span class="number">6</span>]=<span class="string">&quot;2(2)+2&quot;</span>;open[<span class="number">7</span>]=<span class="string">&quot;2(2)+2+2(0)&quot;</span>;</span><br><span class="line">    open[<span class="number">8</span>]=<span class="string">&quot;2(2+2(0))&quot;</span>;open[<span class="number">9</span>]=<span class="string">&quot;2(2+2(0))+2(0)&quot;</span>;open[<span class="number">10</span>]=<span class="string">&quot;2(2+2(0))+2&quot;</span>;</span><br><span class="line">    open[<span class="number">11</span>]=<span class="string">&quot;2(2+2(0))+2+2(0)&quot;</span>;open[<span class="number">12</span>]=<span class="string">&quot;2(2+2(0))+2(2)&quot;</span>;</span><br><span class="line">    open[<span class="number">13</span>]=<span class="string">&quot;2(2+2(0))+2(2)+2(0)&quot;</span>;open[<span class="number">14</span>]=<span class="string">&quot;2(2+2(0))+2(2)+2&quot;</span>;</span><br><span class="line"><span class="comment">//前方高能，逐一枚举，七层循环最多支持拆分成8项（奇数拆分后末尾的2（0）单独特判）</span></span><br><span class="line">    <span class="keyword">for</span>(x,<span class="number">0</span>,<span class="number">14</span>)</span><br><span class="line">    <span class="keyword">for</span>(y,x,<span class="number">14</span>)</span><br><span class="line">    <span class="keyword">for</span>(z,y,<span class="number">14</span>)</span><br><span class="line">    <span class="keyword">for</span>(i,z,<span class="number">14</span>)</span><br><span class="line">    <span class="keyword">for</span>(j,i,<span class="number">14</span>)</span><br><span class="line">    <span class="keyword">for</span>(k,j,<span class="number">14</span>)</span><br><span class="line">    <span class="keyword">for</span>(l,k,<span class="number">14</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mega[i]+mega[j]+mega[k]+mega[l]+mega[x]+mega[y]+mega[z]==n)<span class="comment">//如果满足条件就输出</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l&amp;&amp;l!=<span class="number">1</span>)cout&lt;&lt;<span class="string">&quot;2(&quot;</span>&lt;&lt;open[l]&lt;&lt;<span class="string">&#x27;)&#x27;</span>;<span class="comment">//特判，此项是0就不输出，是2的1次方就直接输出2，否则输出2（x），x也要拆，此时数据范围已经缩小到1~14，直接调用open数组然后输出即可</span></span><br><span class="line">            <span class="keyword">if</span>(l==<span class="number">1</span>)cout&lt;&lt;<span class="string">&quot;+2&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(k&amp;&amp;k!=<span class="number">1</span>)cout&lt;&lt;<span class="string">&#x27;+&#x27;</span>&lt;&lt;<span class="string">&quot;2(&quot;</span>&lt;&lt;open[k]&lt;&lt;<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">1</span>)cout&lt;&lt;<span class="string">&quot;+2&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(j&amp;&amp;j!=<span class="number">1</span>)cout&lt;&lt;<span class="string">&#x27;+&#x27;</span>&lt;&lt;<span class="string">&quot;2(&quot;</span>&lt;&lt;open[j]&lt;&lt;<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">1</span>)cout&lt;&lt;<span class="string">&quot;+2&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;&amp;i!=<span class="number">1</span>)cout&lt;&lt;<span class="string">&#x27;+&#x27;</span>&lt;&lt;<span class="string">&quot;2(&quot;</span>&lt;&lt;open[i]&lt;&lt;<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">1</span>)cout&lt;&lt;<span class="string">&quot;+2&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(z&amp;&amp;z!=<span class="number">1</span>)cout&lt;&lt;<span class="string">&#x27;+&#x27;</span>&lt;&lt;<span class="string">&quot;2(&quot;</span>&lt;&lt;open[z]&lt;&lt;<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(z==<span class="number">1</span>)cout&lt;&lt;<span class="string">&quot;+2&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(y&amp;&amp;y!=<span class="number">1</span>)cout&lt;&lt;<span class="string">&#x27;+&#x27;</span>&lt;&lt;<span class="string">&quot;2(&quot;</span>&lt;&lt;open[y]&lt;&lt;<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(y==<span class="number">1</span>)cout&lt;&lt;<span class="string">&quot;+2&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&amp;&amp;x!=<span class="number">1</span>)cout&lt;&lt;<span class="string">&#x27;+&#x27;</span>&lt;&lt;<span class="string">&quot;2(&quot;</span>&lt;&lt;open[x]&lt;&lt;<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">1</span>)cout&lt;&lt;<span class="string">&quot;+2&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(odd)cout&lt;&lt;<span class="string">&quot;+2(0)&quot;</span>;<span class="comment">//奇数的话，把末尾1补上</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//找到一组就直接输出然后return0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;原题链接&quot;&gt;&lt;a href=&quot;#原题链接&quot; class=&quot;headerlink&quot; title=&quot;原题链接&quot;&gt;&lt;/a&gt;原题链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P1010&quot;&gt;https://www.luogu.com.cn/problem/P1010&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;本蒟蒻来发一波题解，没多少技巧，就是打表。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://husthxj.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="打表" scheme="https://husthxj.top/tags/%E6%89%93%E8%A1%A8/"/>
    
    <category term="数论" scheme="https://husthxj.top/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="洛谷" scheme="https://husthxj.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>Luogu P1603 斯诺登的密码 题解</title>
    <link href="https://husthxj.top/2019/04/19/luogu-p1603/"/>
    <id>https://husthxj.top/2019/04/19/luogu-p1603/</id>
    <published>2019-04-19T05:45:54.000Z</published>
    <updated>2021-08-04T13:21:12.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h2><p><a href="https://www.luogu.com.cn/problem/P1603">https://www.luogu.com.cn/problem/P1603</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这道题，我的思路有打表的成分，还用了哈希。</p><span id="more"></span><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1111</span>],sx[<span class="number">1111</span>],h[<span class="number">55</span>],cnt,temp,start;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(string x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> b=<span class="number">1111111111</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lens=x.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans*=b;</span><br><span class="line">        ans+=x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//打表，存储1~20的哈希值（first、another什么的另外存）</span></span><br><span class="line">    h[<span class="number">1</span>]=<span class="built_in">hash</span>(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">    h[<span class="number">2</span>]=<span class="built_in">hash</span>(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">    h[<span class="number">3</span>]=<span class="built_in">hash</span>(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">    h[<span class="number">4</span>]=<span class="built_in">hash</span>(<span class="string">&quot;four&quot;</span>);</span><br><span class="line">    h[<span class="number">5</span>]=<span class="built_in">hash</span>(<span class="string">&quot;five&quot;</span>);</span><br><span class="line">    h[<span class="number">6</span>]=<span class="built_in">hash</span>(<span class="string">&quot;six&quot;</span>);</span><br><span class="line">    h[<span class="number">7</span>]=<span class="built_in">hash</span>(<span class="string">&quot;seven&quot;</span>);</span><br><span class="line">    h[<span class="number">8</span>]=<span class="built_in">hash</span>(<span class="string">&quot;eight&quot;</span>);</span><br><span class="line">    h[<span class="number">9</span>]=<span class="built_in">hash</span>(<span class="string">&quot;nine&quot;</span>);</span><br><span class="line">    h[<span class="number">10</span>]=<span class="built_in">hash</span>(<span class="string">&quot;ten&quot;</span>);</span><br><span class="line">    h[<span class="number">11</span>]=<span class="built_in">hash</span>(<span class="string">&quot;eleven&quot;</span>);</span><br><span class="line">    h[<span class="number">12</span>]=<span class="built_in">hash</span>(<span class="string">&quot;twelve&quot;</span>);</span><br><span class="line">    h[<span class="number">13</span>]=<span class="built_in">hash</span>(<span class="string">&quot;thirteen&quot;</span>);</span><br><span class="line">    h[<span class="number">14</span>]=<span class="built_in">hash</span>(<span class="string">&quot;fourteen&quot;</span>);</span><br><span class="line">    h[<span class="number">15</span>]=<span class="built_in">hash</span>(<span class="string">&quot;fifteen&quot;</span>);</span><br><span class="line">    h[<span class="number">16</span>]=<span class="built_in">hash</span>(<span class="string">&quot;sixteen&quot;</span>);</span><br><span class="line">    h[<span class="number">17</span>]=<span class="built_in">hash</span>(<span class="string">&quot;seventeen&quot;</span>);</span><br><span class="line">    h[<span class="number">18</span>]=<span class="built_in">hash</span>(<span class="string">&quot;eighteen&quot;</span>);</span><br><span class="line">    h[<span class="number">19</span>]=<span class="built_in">hash</span>(<span class="string">&quot;nineteen&quot;</span>);</span><br><span class="line">    h[<span class="number">20</span>]=<span class="built_in">hash</span>(<span class="string">&quot;twenty&quot;</span>);</span><br><span class="line">    h[<span class="number">21</span>]=<span class="built_in">hash</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    h[<span class="number">22</span>]=<span class="built_in">hash</span>(<span class="string">&quot;both&quot;</span>);</span><br><span class="line">    h[<span class="number">23</span>]=<span class="built_in">hash</span>(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">    h[<span class="number">24</span>]=<span class="built_in">hash</span>(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">    h[<span class="number">25</span>]=<span class="built_in">hash</span>(<span class="string">&quot;third&quot;</span>);</span><br><span class="line">    h[<span class="number">26</span>]=<span class="built_in">hash</span>(<span class="string">&quot;another&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>]&lt;<span class="string">&#x27;a&#x27;</span>)s[<span class="number">0</span>]+=<span class="number">32</span>;<span class="comment">//单词首字母统一转换成小写</span></span><br><span class="line">        temp=<span class="built_in">hash</span>(s);<span class="comment">//计算该单词哈希值，之后逐一比对(提前计算好各数字平方%100之后的数)</span></span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">1</span>]||temp==h[<span class="number">21</span>]||temp==h[<span class="number">23</span>]||temp==h[<span class="number">26</span>])a[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">2</span>]||temp==h[<span class="number">22</span>]||temp==h[<span class="number">24</span>])a[i]=<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">3</span>]||temp==h[<span class="number">25</span>])a[i]=<span class="number">9</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">4</span>])a[i]=<span class="number">16</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">5</span>]||temp==h[<span class="number">15</span>])a[i]=<span class="number">25</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">6</span>])a[i]=<span class="number">36</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">7</span>])a[i]=<span class="number">49</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">8</span>])a[i]=<span class="number">64</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">9</span>])a[i]=<span class="number">81</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">10</span>]||temp==h[<span class="number">20</span>])a[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">11</span>])a[i]=<span class="number">21</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">12</span>])a[i]=<span class="number">44</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">13</span>])a[i]=<span class="number">69</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">14</span>])a[i]=<span class="number">96</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">16</span>])a[i]=<span class="number">56</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">17</span>])a[i]=<span class="number">89</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">18</span>])a[i]=<span class="number">24</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp==h[<span class="number">19</span>])a[i]=<span class="number">61</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;s;<span class="comment">//输入末尾的句点，没卵用</span></span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">7</span>);<span class="comment">//将数字从小到大排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sx[++cnt]=a[i]/<span class="number">10</span>;</span><br><span class="line">        sx[++cnt]=a[i]%<span class="number">10</span>;</span><br><span class="line">    &#125;<span class="comment">//此处可能比较笨，是逐位输入到另一个数组</span></span><br><span class="line">    <span class="keyword">while</span>(sx[start]==<span class="number">0</span>&amp;&amp;start&lt;cnt)start++;<span class="comment">//滤掉开头所有0（如果全都是0则保留一个）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=cnt;i++)cout&lt;&lt;sx[i];<span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;原题链接&quot;&gt;&lt;a href=&quot;#原题链接&quot; class=&quot;headerlink&quot; title=&quot;原题链接&quot;&gt;&lt;/a&gt;原题链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P1603&quot;&gt;https://www.luogu.com.cn/problem/P1603&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;&gt;&lt;/a&gt;解题思路&lt;/h2&gt;&lt;p&gt;这道题，我的思路有打表的成分，还用了哈希。&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://husthxj.top/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="打表" scheme="https://husthxj.top/tags/%E6%89%93%E8%A1%A8/"/>
    
    <category term="洛谷" scheme="https://husthxj.top/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="哈希表" scheme="https://husthxj.top/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
</feed>
